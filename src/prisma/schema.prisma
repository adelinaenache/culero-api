generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  GOOGLE
  APPLE
  FACEBOOK
  LINKEDIN
  EMAIL
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  name                 String?
  profilePictureUrl    String?
  socialAccounts       UserSocialAccount[]
  authType             AuthType
  isEmailVerified      Boolean               @default(false)
  headline             String?
  jobTitle             String?
  followers            Connection[]          @relation("followsTheUser")
  followings           Connection[]          @relation("followedByUser")
  LinkedSocialAccounts LinkedSocialAccount[]
  reviewsPosted        Review[]              @relation("reviewsGivenToOtherUsers")
  reviewsReceived      Review[]              @relation("reviewsRecievedFromOtherUsers")
  joinedAt             DateTime              @default(now())
}

model Connection {
  id          Int    @id @default(autoincrement())
  follower    User   @relation("followedByUser", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("followsTheUser", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model LinkedSocialAccount {
  id                 Int       @id @default(autoincrement())
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  platform           String
  isConnected        Boolean   @default(false)
  profileUrl         String?
  accessToken        String?   @db.Text
  refreshToken       String?   @db.Text
  accessTokenExpiry  DateTime?
  refreshTokenExpiry DateTime?

  @@unique([userId, platform])
}

model Review {
  id              Int      @id @default(autoincrement())
  // Person who is being rated
  postedTo        User     @relation(fields: [postedToId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "reviewsRecievedFromOtherUsers")
  postedToId      String
  // Person who is rating
  postedBy        User?    @relation(fields: [postedById], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "reviewsGivenToOtherUsers")
  postedById      String?
  professionalism Int      @default(0)
  reliability     Int      @default(0)
  communication   Int      @default(0)
  comment         String?
  createdAt       DateTime @default(now())
  anonymous       Boolean  @default(false)
}

model UserSocialAccount {
  id          String @id @default(cuid())
  provider    String @unique
  accessToken String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model VerificationCode {
  code      String   @id
  email     String
  expiresAt DateTime

  @@unique([email])
}
